-- Elt,Errを包含するElt&Errを定義,
mod* TRIV-ERR {
  [Elt Err < Elt&Err]
  op err : -> Err .
}

mod! NAT-ERR principal-sort Nat {
  pr(NAT)
  [Nat ErrNat < Nat&Err]
  op errNat : -> ErrNat {constr} .
  op _*_ : Nat&Err Nat&Err -> Nat&Err .
  op if_then{_}else{_} : Bool Nat&Err Nat&Err -> Nat&Err .
  vars NE NE1 NE2 : Nat&Err .
  eq errNat * NE = errNat .
  eq NE * errNat = errNat .
  eq if true then {NE1} else {NE2} = NE1 .
  eq if false then {NE1} else {NE2} = NE2 .
}

-- err時のListの挙動を定義する
mod! GLIST-ERR(E :: TRIV-ERR) {
  [Nil NnList < List]
  [List ErrList < List&Err]
  op errList : -> ErrList {constr} .
  op nil : -> Nil {constr}
  op _|_ : Elt.E List -> List {constr} .  -- push_top
  op _|_ : Elt&Err.E List&Err -> List&Err .
  op hd : Nil -> Err.E .
  op hd : NnList -> Elt.E .
  op hd : ErrList -> Err.E .
  op hd : List&Err -> Elt&Err .
  op tl : Nil -> ErrList .
  op tl : NnList -> List .
  op tl : ErrList -> ErrList .
  op tl : List&Err -> List&Err .
  op _@_ : List List -> List .
  op _@_ : ErrList List&Err -> ErrList .
  op _@_ : List&Err ErrList -> ErrList .
  op _@_ : List&Err List&Err -> List&Err .
  op if_then{_}else{_} : Bool List&Err List&Err -> List&Err .
  var X : Elt.E .
  var XE : Elt&Err.E .
  vars L L2 : List .
  vars LE LE2 : List&Err .
  eq err.E | LE = errList .
  eq XE | errList = errList .
  eq hd(nil) = err.E .
  eq hd(X | L) = X .
  eq hd(errList) = err.E .
  eq tl(nil) = errList .
  eq tl(X | L) = L .
  eq tl(errList) = errList .
  eq nil @ L2 = L2 .
  eq (X | L) @ L2 = X | (L @ L2) .
  eq errList @ LE = errList .
  eq LE @ errList = errList .
  eq if true then {LE} else {LE2} = LE .
  eq if false then {LE} else {LE2} = LE2 .
}

-- 自然数のTRIPLE module
-- strategy(1 0)はleft-most inner-most strategy
-- 1stの引数を先に評価してその後全体を評価する
-- 1stはTripleの先頭要素を返す
mod! NAT-TRIPLE-IMLM {
  pr(NAT)
  [NatTriple]
  op (_,_,_) : Nat Nat Nat -> NatTriple {constr}
  op 1st : NatTriple -> Nat {strat: (1 0)}
  vars FE SE TE : Nat .
  eq 1st((FE,SE,TE)) = FE .
}

open NAT-TRIPLE-IMLM .
  red 1st((1 + 1,2 + 2,3 + 3)) .
close

-- 無限リストの場合最内戦略だと処理が終わらない場合がある
-- E-strategyは引数の評価順

-- TRIPLEの先頭を取得するmod
-- strategy(0 1 0)はleft-most outer-most strategy
-- 1stがredexになっていれば置き換え以降の1 0は採用しない
-- redexになっていなければ1 0を採用する
mod! NAT-TRIPLE-OMLM {
  pr(NAT)
  [NatTriple]
  op (_,_,_) : Nat Nat Nat -> NatTriple {constr}
  op 1st : NatTriple -> Nat {strat: (0 1 0)}
  vars FE SE TE : Nat .
  eq 1st((FE,SE,TE)) = FE .
}

-- 

open NAT-TRIPLE-OMLM .
  red 1st((1 + 1,2 + 2,3 + 3)) .
close

-- (1 0 2 3)
-- boolを先に評価 -> if全体がredexになるのでthen/elseのあとに置き換える
-- if全体がredexにならなかった場合はthen/elseそれぞれを評価する(基本ありえない)
-- true/falseのようなredexになる要素だけを計算する
mod! NAT-IF { 
  pr(NAT)
  op if_then{_}else{_} : Bool Nat Nat -> Nat .
  vars N1 N2 : Nat .
  eq if true then {N1} else {N2} = N1 .
  eq if false then {N1} else {N2} = N2 . 
}

show NAT-IF .

-- parameterized list
mod! GLIST(E :: TRIV) {
  [Nil NnList < List]
  op nil : -> Nil {constr} .
  op _|_ : Elt.E List -> List {constr} .
}

-- 無限list
-- e-strategyは(1 0)なので1つ目の引数 Elt.Eを先に評価する
-- その後全体を評価する
-- infListは評価しない
-- takeは無限リストの先頭要素を取り出す操作を繰り返し有限リストを作る
mod* INF-LIST(E :: TRIV) {
  [InfList]
  pr(NAT)
  pr(GLIST(E))
  op _|_ : Elt.E InfList -> InfList {strat: (1 0)} . 
  vars X Y : Elt.E .
  vars IL IL2 : InfList .
  var NzN : NzNat .
  var N : Nat .
  var L : List .
  op take : InfList Nat -> List .
  eq take(IL,0) = nil .
  eq take(X | IL, NzN) = X | take(IL,p NzN) .
  op drop : InfList Nat -> InfList .
  eq drop(IL,0) = IL .
  eq drop(X | IL, NzN) = drop(IL,p NzN) .
  op _@_ : List InfList -> InfList .
  eq nil @ IL = IL .
  eq (X | L) @ IL = X | (L @ IL) .
  op zip : InfList InfList -> InfList .
  eq zip(X | IL,Y | IL2) = X | Y | zip(IL,IL2) .
}

show INF-LIST .

-- Nからインクリメントされる自然数の無限リストを作るmodule
-- mkNILFromはstrat: (0 1)でありInfListは評価しない
mod! NAT-INF-LIST {
  pr(INF-LIST(NAT)) .
  op mkNILFrom : Nat -> InfList .
  op if_then{_}else{_} : Bool InfList InfList -> InfList .
  var N : Nat .
  vars IL1 IL2 : InfList .
  eq mkNILFrom(N) = N | mkNILFrom(N + 1) .
  eq if true then {IL1} else {IL2} = IL1 .
  eq if false then {IL1} else {IL2} = IL2 .
}

-- show NAT-INF-LIST

open NAT-INF-LIST .
  red mkNILFrom(0) .
  red take(mkNILFrom(0),10) .
  red drop(mkNILFrom(0),10) .
  red take(drop(mkNILFrom(0),997),10) .
  red take(take(mkNILFrom(0),10) @ drop(mkNILFrom(0),10),20) .
  red take(mkNILFrom(0),20) .
  red zip(mkNILFrom(0),mkNILFrom(0)) .
  red take(drop(zip(mkNILFrom(0),mkNILFrom(0)),997),10) .
close

-- sieve
-- 2から始まる無限listを作る
-- 各要素の倍数になる要素を除いたlistを作る操作を繰り返し素数のリストを得る
mod! ERATOSTHENES-SIEVE {
  pr(NAT-INF-LIST)
  op primes : -> InfList .
  op sieve : InfList -> InfList .
  op check : Nat InfList -> InfList .
  vars X Y : Nat .
  var NzX : NzNat .
  var IL : InfList .
  eq primes = sieve(mkNILFrom(2)) .
  eq sieve(X | IL) = X | sieve(check(X,IL)) .
  eq check(0,IL) = IL .
  eq check(NzX,Y | IL) = if NzX divides Y then {check(NzX,IL)} else {Y | check(NzX,IL)} .
}

-- primes inflistは評価されないのでsieveは評価されない
-- take 無限リストと自然数から有限リストを取得する
open ERATOSTHENES-SIEVE .
  red primes .
  red take(primes,10) .
  red take(primes,20) .
  red take(primes,50) .
  red take(primes,100) .
close

-- hamming
-- inflistは評価されないのでham,mergeは評価されない
-- mergeはX,Yを比較して
-- Y > X -> Xを取り出し残りの要素をmerge
-- X > Y -> Yを取り出して残りの要素をmerge
-- X == Y -> Xを取り出してYを消去した上で残りの要素をmerge
mod! HAMMING {
  pr(NAT-INF-LIST)
  op ham : -> InfList .
  op 2* : InfList -> InfList .
  op 3* : InfList -> InfList .
  op 5* : InfList -> InfList .
  op merge : InfList InfList -> InfList .
  vars X Y : Nat .
  vars IL IL2 : InfList .
  eq ham = 1 | merge(merge(2*(ham),3*(ham)),5*(ham)) .
  eq 2*(X | IL) = 2 * X | 2*(IL) .
  eq 3*(X | IL) = 3 * X | 3*(IL) .
  eq 5*(X | IL) = 5 * X | 5*(IL) .
  eq merge(X | IL, Y | IL2) = if X < Y then {X | merge(IL,Y | IL2)} else {if Y < X then {Y | merge(X | IL,IL2)} else {X | merge(IL,IL2)}} .
}

show HAMMING .

-- ham 
open HAMMING .
  red ham .
  -- red take(ham,10) .
  -- red take(ham,20) .
  -- red take(ham,50) .
  -- red take(ham,100) .
close

-- スレッドの定義
mod! TID {
  [Tid]
  ops t1 t2 : -> Tid {constr} .
  op if_then{_}else{_} : Bool Tid Tid -> Tid .
  vars T1 T2 : Tid .
  eq if true then {T1} else {T2} = T1 .
  eq if false then {T1} else {T2} = T2 .
}

-- threadがいる場所(location)を表す rm ms cs
-- rs remainder section
-- ms 略称不明
-- cs critical section
mod! LOC {
  [Loc]
  ops rs ms cs : -> Loc {constr} .
}

-- Stateの定義
-- lockの状態とthread1,2がそれぞれどのセクションにいるかをStateの定義とする
mod! STATE principal-sort State {
  pr(LOC)
  [State]
  op (locked:_,pc1:_,pc2:_) : Bool Loc Loc -> State {constr} .
}

-- 状態遷移の定義
-- thread1とthread2のロケーションとlockedの状態が決まれば次の状態が決まる
-- 対象のスレッドについてrsにいてlockがされているときは何もしない
-- rsにいてlockがされていないときはmsに入る
-- msにいるときはlockする
-- csにいるときはunlockする
mod! FMUTEX {
  pr(STATE)
  pr(TID)
  op trans : State Tid -> State .
  vars L1 L2 L3 L4 : Loc .
  var B : Bool .
  -- thread1の定義
  eq trans((locked: true, pc1: rs, pc2: L2),t1) = (locked: true,pc1: rs, pc2: L2) .
  eq trans((locked: false, pc1: rs, pc2: L2),t1) = (locked: false,pc1: ms, pc2: L2) .
  eq trans((locked: B, pc1: ms, pc2: L2),t1) = (locked: true,pc1: cs, pc2: L2) .
  eq trans((locked: B, pc1: cs, pc2: L2),t1) = (locked: false,pc1: rs, pc2: L2) .

  eq trans((locked: true, pc1: L1, pc2: rs),t2) = (locked: true,pc1: L1, pc2: rs) .
  eq trans((locked: false, pc1: L1, pc2: rs),t2) = (locked: false,pc1: L1, pc2: ms) .
  eq trans((locked: B, pc1: L1, pc2: ms),t2) = (locked: true,pc1: L1, pc2: cs) .
  eq trans((locked: B, pc1: L1, pc2: cs),t2) = (locked: false,pc1: L1, pc2: rs) .
}

-- 無限リストをStateで具体化し無限リストをComp，有限リストをFCompとリネームする
mod! COMP {
  pr(INF-LIST(STATE)
    * {
      sort InfList -> Comp,
      sort List -> FComp
    }
  )
}

-- 非乱数 擬似的にt1,t2をばらけさせたスレッドのリストを作る
mod! SCHED {
  pr(NAT)
  pr(INF-LIST(TID)
    * {
      sort InfList -> Sched
    }
  )
  op sched : Nat -> Sched .
  op if_then{_}else{_} : Bool Sched Sched -> Sched .
  var N : Nat .
  vars S1 S2 : Sched .
  eq if true then {S1} else {S2} = S1 .
  eq if false then {S1} else {S2} = S2 .
  eq sched(N) = if 2 divides N then {t1 | sched(N quo 2)} else {t2 | sched(N quo 2)} .
}

open SCHED .
  red take(sched(123), 10) .
  red take(sched(1234), 10) .
  red take(sched(12345), 10) .
close

-- シュミレート用module
-- 初期状態Sとschedule用の初期値Nでシュミレートされる
-- sub-simでは現在の状態Sとscheduleされたスレッドから次の状態を生成する
-- sub-simでSは状態として確定しscheduleされた次のthreadを先頭から取り出し遷移をする
mod! SIM {
  pr(FMUTEX)
  pr(COMP)
  pr(SCHED)
  op sim : State Nat -> Comp .
  op sub-sim : State Sched -> Comp .
  var S : State .
  var N : Nat .
  var NzD : NzNat .
  var T : Tid .
  var TIL : Sched .
  -- 初期状態Sとscheduleを与える
  eq sim(S,N) = sub-sim(S,sched(N)) .
  eq sub-sim(S,T | TIL) = S | sub-sim(trans(S,T), TIL) .
}



-- 擬似コードが正しいのか -> 正しくない
-- FMUTEXのFの意味
-- 動画1:30部分

-- (t2 | (t2 | (t1 | (t2 | (t2 | (t2 | (t2 | (t1 | (t1 | (t1 | nil)))))))))):List

-- ((locked: false , pc1: rs , pc2: rs) | 
-- ((locked: false , pc1: rs , pc2: ms) | 
-- ((locked: true , pc1: rs , pc2: cs) | 
-- ((locked: true , pc1: rs , pc2: cs) | 
-- ((locked: false , pc1: rs , pc2: rs) |
-- ((locked: false , pc1: rs , pc2: ms) |
-- ((locked: true , pc1: rs , pc2: cs) |
-- ((locked: false , pc1: rs , pc2: rs) |
-- ((locked: false , pc1: ms , pc2: rs) |
-- ((locked: true , pc1: cs , pc2: rs) | nil)))))))))):FComp

-- sim(state,nat)
-- sim(state, nat)->sched(nat)でスケジューラ生成
-- nat=123の場合123/2,61,30,15,7,3,1,....
-- 初期状態からt2の遷移
open SIM .
  red take(sim((locked: false, pc1: rs, pc2: rs),123),10) .
  red take(sim((locked: false, pc1: rs, pc2: rs),1234),10) .
  red take(sim((locked: false, pc1: rs, pc2: rs),12345),10) .
close

-- thread1,2ともにcsにあるという状態がないことのcheckを加えたsimulator
-- 問題がなければsimulateを続け問題があればその時点の状態を返す
mod! RSIM {
  pr(FMUTEX)
  pr(COMP)
  pr(SCHED)
  op sim : State Nat -> Comp .
  op mutex : State -> Bool .
  op sim-check : State Nat Nat -> FComp .
  op sub-sim-check : State Sched Nat -> FComp .
  op if_then{_}else{_} : Bool FComp FComp -> FComp .
  var S : State .
  var N : Nat .
  var T : Tid .
  var TIL : Sched .
  vars L1 L2 : Loc .
  -- vars L1 L2 L3 L4 : Loc .
  var B : Bool .
  var D : Nat .
  var NzD : NzNat .
  vars F1 F2 : FComp .
  eq if true then {F1} else {F2} = F1 .
  eq if false then {F1} else {F2} = F2 .
  eq mutex((locked: B, pc1: L1, pc2: L2)) = not (L1 == cs and L2 == cs) .
  eq sim-check(S,N,D) = sub-sim-check(S,sched(N),D) .
  eq sub-sim-check(S,T | TIL,0) = S | nil .
  eq sub-sim-check(S,T | TIL,NzD) = if mutex(S) then {S | sub-sim-check(trans(S,T),TIL,p NzD)} else {S | nil} .
}

open RSIM .
  red sim-check((locked: false,pc1: rs,pc2: rs),123,10) .
  red sim-check((locked: false,pc1: rs,pc2: rs),1234,10) .
  red sim-check((locked: false,pc1: rs,pc2: rs),12345,10) .
close


-- 4 thread
-- 4thread対応のためt3,t4を定義する
mod! F-TID {
  [Tid]
  ops t1 t2 t3 t4 : -> Tid {constr} .
  op if_then{_}else{_} : Bool Tid Tid -> Tid .
  vars T1 T2 : Tid .
  eq if true then {T1} else {T2} = T1 .
  eq if false then {T1} else {T2} = T2 .
}

-- 状態の定義にt3,t4のロケーションを追加する
mod! F-STATE principal-sort FState {
  pr(LOC)
  [FState]
  op (locked:_,pc1:_,pc2:_,pc3:_,pc4:_) : Bool Loc Loc Loc Loc -> FState {constr} .
}

-- t3,t4を含めて状態の遷移を定義する
mod! F-FMUTEX {
  pr(F-STATE)
  pr(F-TID)
  op trans : FState Tid -> FState .
  vars L1 L2 L3 L4 : Loc .
  var B : Bool .
  eq trans((locked: true, pc1: rs, pc2: L2, pc3: L3, pc4: L4),t1) = (locked: true,pc1: rs, pc2: L2, pc3: L3, pc4: L4) .
  eq trans((locked: false, pc1: rs, pc2: L2, pc3: L3, pc4: L4),t1) = (locked: false,pc1: ms, pc2: L2, pc3: L3, pc4: L4) .
  eq trans((locked: B, pc1: ms, pc2: L2, pc3: L3, pc4: L4),t1) = (locked: true,pc1: cs, pc2: L2, pc3: L3, pc4: L4) .
  eq trans((locked: B, pc1: cs, pc2: L2, pc3: L3, pc4: L4),t1) = (locked: false,pc1: rs, pc2: L2, pc3: L3, pc4: L4) .

  eq trans((locked: true, pc1: L1, pc2: rs, pc3: L3, pc4: L4),t2) = (locked: true,pc1: L1, pc2: rs, pc3: L3, pc4: L4) .
  eq trans((locked: false, pc1: L1, pc2: rs, pc3: L3, pc4: L4),t2) = (locked: false,pc1: L1, pc2: ms, pc3: L3, pc4: L4) .
  eq trans((locked: B, pc1: L1, pc2: ms, pc3: L3, pc4: L4),t2) = (locked: true,pc1: L1, pc2: cs, pc3: L3, pc4: L4) .
  eq trans((locked: B, pc1: L1, pc2: cs, pc3: L3, pc4: L4),t2) = (locked: false,pc1: L1, pc2: rs, pc3: L3, pc4: L4) .

  eq trans((locked: true, pc1: L1, pc2: L2, pc3: rs, pc4: L4),t3) = (locked: true,pc1: L1, pc2: L2, pc3: rs, pc4: L4) .
  eq trans((locked: false, pc1: L1, pc2: L2, pc3: rs, pc4: L4),t3) = (locked: false,pc1: L1, pc2: L2, pc3: ms, pc4: L4) .
  eq trans((locked: B, pc1: L1, pc2: L2, pc3: ms, pc4: L4),t3) = (locked: true,pc1: L1, pc2: L2, pc3: cs, pc4: L4) .
  eq trans((locked: B, pc1: L1, pc2: L2, pc3: cs, pc4: L4),t3) = (locked: false,pc1: L1, pc2: L2, pc3: rs, pc4: L4) .

  eq trans((locked: true, pc1: L1, pc2: L2, pc3: L3, pc4: rs),t4) = (locked: true,pc1: L1, pc2: L2, pc3: L3, pc4: rs) .
  eq trans((locked: false, pc1: L1, pc2: L2, pc3: L3, pc4: rs),t4) = (locked: false,pc1: L1, pc2: L2, pc3: L3, pc4: ms) .
  eq trans((locked: B, pc1: L1, pc2: L2, pc3: L3, pc4: ms),t4) = (locked: true,pc1: L1, pc2: L2, pc3: L3, pc4: cs) .
  eq trans((locked: B, pc1: L1, pc2: L2, pc3: L3, pc4: cs),t4) = (locked: false,pc1: L1, pc2: L2, pc3: L3, pc4: rs) .
}

mod! F-COMP {
  pr(INF-LIST(F-STATE)
    * {
      sort InfList -> Comp,
      sort List -> FComp
    }
  )
}

-- 非乱数 擬似的にt1,t2,t3,t4をばらけさせたスレッドのリストを作る
-- 2の倍数&&3の倍数であればt1を割り当て
-- 2の倍数&&3の倍数でなければt2を割り当て
-- 2の倍数でない&&5の倍数であればt3を割り当て
-- 2の倍数でない&&5の倍数でなければt4を割り当て
mod! F-SCHED {
  pr(NAT)
  pr(INF-LIST(F-TID)
    * {
      sort InfList -> Sched
    }
  )
  op sched : Nat -> Sched .
  op if_then{_}else{_} : Bool Sched Sched -> Sched .
  var N : Nat .
  vars S1 S2 : Sched .
  eq if true then {S1} else {S2} = S1 .
  eq if false then {S1} else {S2} = S2 .
  eq sched(N) = if 2 divides N then {if 3 divides N then {t1 | sched(N quo 2)} else {t2 | sched(N quo 2)}} else {if 5 divides N then {t3 | sched(N quo 2)} else {t4 | sched(N quo 2)}} .
}

-- 2thread時と同様でimportするmoduleのみ変更
mod! F-SIM {
  pr(F-FMUTEX)
  pr(F-COMP)
  pr(F-SCHED)
  op sim : FState Nat -> Comp .
  op sub-sim : FState Sched -> Comp .
  var S : FState .
  var N : Nat .
  var NzD : NzNat .
  var T : Tid .
  var TIL : Sched .
  -- 初期状態Sとscheduleを与える
  eq sim(S,N) = sub-sim(S,sched(N)) .
  --  Sは状態として確定しscheduleされたthreadを先頭から取り出し遷移をする
  eq sub-sim(S,T | TIL) = S | sub-sim(trans(S,T), TIL) .
}

open F-SCHED .
  -- red take(sched(123), 10) .
  -- red take(sched(1234), 10) .
  -- red take(sched(12345), 10) .
close

open F-SIM .
  red take(sim((locked: false, pc1: rs, pc2: rs, pc3: rs, pc4: rs),123),10) .
  red take(sim((locked: false, pc1: rs, pc2: rs, pc3: rs, pc4: rs),1234),10) .
  red take(sim((locked: false, pc1: rs, pc2: rs, pc3: rs, pc4: rs),12345),10) .
close

-- セクションの状態のチェックを4thread対応したmodule
-- 4つのthreadのうち2つがcsに入っていた場合処理を止める
mod! F-RSIM {
  pr(F-FMUTEX)
  pr(F-COMP)
  pr(F-SCHED)
  op sim : FState Nat -> Comp .
  op mutex : FState -> Bool .
  op sim-check : FState Nat Nat -> FComp .
  op sub-sim-check : FState Sched Nat -> FComp .
  op if_then{_}else{_} : Bool FComp FComp -> FComp .
  var S : FState .
  var N : Nat .
  var T : Tid .
  var TIL : Sched .
  vars L1 L2 L3 L4 : Loc .
  var B : Bool .
  var D : Nat .
  var NzD : NzNat .
  vars F1 F2 : FComp .
  eq if true then {F1} else {F2} = F1 .
  eq if false then {F1} else {F2} = F2 .
  eq mutex((locked: B, pc1: L1, pc2: L2, pc3: L3, pc4: L4)) = not ((L1 == cs and L2 == cs) or (L1 == cs and L3 == cs) or (L1 == cs and L4 == cs) or (L2 == cs and L3 == cs) or (L3 == cs or L4 == cs)) .
  eq sim-check(S,N,D) = sub-sim-check(S,sched(N),D) .
  eq sub-sim-check(S,T | TIL,0) = S | nil .
  eq sub-sim-check(S,T | TIL,NzD) = if mutex(S) then {S | sub-sim-check(trans(S,T),TIL,p NzD)} else {S | nil} .
}

open F-RSIM .
  red sim-check((locked: false,pc1: rs,pc2: rs, pc3: rs, pc4: rs),123,10) .
  red sim-check((locked: false,pc1: rs,pc2: rs, pc3: rs, pc4: rs),1234,10) .
  red sim-check((locked: false,pc1: rs,pc2: rs, pc3: rs, pc4: rs),12345,10) .
close