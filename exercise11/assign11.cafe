mod! PNAT1 {
  [PNat]
  op 0 : -> PNat {constr} .
  op s : PNat -> PNat {constr} .
  vars X Y Z : PNat .

  -- sが1回でもかかっている->1以上の自然数
  -- 0と1以上の自然数は常に異なる
  eq (0 = s(Y)) = false .
  eq (s(X) = s(Y)) = (X = Y) .

  -- 
  op _+_ : PNat PNat -> PNat .
  eq 0 + Y = Y .
  eq s(X) + Y = s(X + Y) .

  op _*_ : PNat PNat -> PNat .
  eq 0 * Y = 0 .
  eq s(X) * Y = (X * Y) + Y .

  op fact1 : PNat -> PNat .
  eq fact1(0) = s(0) . -- f1-1
  eq fact1(s(X)) = s(X) * fact1(X) . -- f1-2

  op fact2 : PNat -> PNat .
  op sfact2 : PNat PNat -> PNat .
  eq fact2(X) = sfact2(X,s(0)) . -- f2
  eq sfact2(0,Y) = Y . -- sf2-1
  eq sfact2(s(X),Y) = sfact2(X,s(X) * Y) . -- sf2-2
}

-- 手書きはフォーマットに従う
-- 1. 証明をどこから始めるか書く(proof of theorem)
-- 2. どの変数に着目してどのような方法を使うか
-- 3. 証明に用いるfresh constantを書く(このタイミングでわからないこともあるのでスペースをあける)
-- 4. Base case で証明するものを記載する redexと等式を書く
-- 5. induction caseで証明するもの、帰納法の仮定を書く
-- 6. 証明がどこで終わったのかを書く(end of proof of theorem)

-- -> traceをcafeobjに任せることも可能

-- base case
set trace on
open PNAT1 .
  -- fresh constants
  ops y z : -> PNat .
  -- check
  red (0 + y) + z = 0 + (y + z) .
close
set trace off

-- indcution case
set trace on
open PNAT1 .
  -- fresh constants
  ops x y z : -> PNat .
  -- IH
  eq (x + Y) + Z = x + (Y + Z) .
  -- check
  red (s(x) + y) + z = s(x) + (y + z) .
close
set trace off

-- commutativityの証明
-- X+Y = Y+X

-- base case
-- 0+y = y+0
-- 0+y->y by(+1)

-- 補題 X + 0 = X (rz+) を仮定
-- y+0->y by(rz+)

-- induction case
-- s(x) + y = y + s(x)
-- x + Y = Y + x -- (IH)
-- s(x) + y -> s(x + y) by(+2)
-- s(x + y) -> s(y + x) by(IH)

-- 補題 X+s(Y) = s(X+Y) (rs+)

-- rz+
-- lemma1
-- X + 0 = X
-- base case
-- 0 + 0 = 0
-- 0 + 0 -> 0 by(+1)

-- induction case
-- x + 0 = x (IH)
-- s(x) + 0 = s(x)
-- s(x) + 0 -> s(x+0) by(+2)
-- s(x+0) -> s(x) by(IH)

-- rs+
-- lemma2
-- s(X) + s(Y) = s(s(X)+Y)

-- base case
-- 0 + s(Y) = s(0+Y)
-- 0 + s(Y) = s(Y) by(+1)

-- s(0+Y) -> s(Y) by(+1)

-- induction case
-- s(x) + s(Y) = s(x+Y) (IH)

-- lemma1
-- base case
open PNAT1 .
  -- check
  red 0 + 0 = 0 .
close

-- induction case
open PNAT1 .
  -- fresh constants
  op x : -> PNat .
  -- IH
  eq x + 0 = x .
  -- check
  red s(x) + 0 = s(x) .
close

-- lemma2
-- base case
open PNAT1 .
  -- fresh constants
  op y : -> PNat .
  -- check
  red 0 + s(y) = s(0 + y) .
close

-- induction case
open PNAT1 .
  -- fresh constants
  ops x y : -> PNat .
  -- IH
  eq x + s(Y) = s(x + Y) .
  -- check
  red s(x) + s(y) = s(s(x) + y) .
close

-- theorem2
-- base case
open PNAT1 .
  -- fresh constants
  op y : -> PNat .
  -- lemmas
  eq X + 0 = X . -- (rz+)
  -- check
  red 0 + y = y + 0 .
close

-- induction case
open PNAT1 .
  -- fresh constants
  ops x y : -> PNat .
  -- lemmas
  eq X + s(Y) = s(X + Y) . -- (rs+)
  -- IH
  eq x + Y = Y + x .
  -- check
  red s(x) + y = y + s(x) .
close

-- assoc of _*_
-- theorem 3
-- (X * Y) * Z = X * (Y * Z)
-- base case
open PNAT1 .
  -- fresh constants
  ops y z : -> PNat .
  -- check
  red (0 * y) * z = 0 * (y * z) .
close

-- induction case
-- (s(x) * Y) * Z = s(x) * (Y * Z) . 
-- (x * Y) * Z = x * (Y * Z) - (IH)

-- (s(x) * Y) * Z -> ((x * Y) + Y) * Z by(*1)
-- (x * Y) * Z + (Y * Z) この形に持っていければ右辺と等しいことがIHから示せるので分配法則を補題で示す

-- s(x) * (Y * Z) -> (x * (Y * Z)) + (Y * Z)
-- x * (Y * Z) + (Y * Z)

-- lemma1
-- (x + y) * z = (x * z) + (y * z)
-- base case
-- (0 + y) * z = (0 * z) + (y * z)

-- (0 + y) * z -> y * z by(+1)

-- (0 * z) + (y * z) -> 0 + (y * z) by(*1)
-- 0 + (y * z) -> y * z by(+1)

open PNAT1 .
  -- fresh constants
  ops y z : -> PNat .
  -- check
  red (0 + y) * z = (0 * z) + (y * z) .
close

-- induction case
-- (s(x) + y) * z = (s(x) * z) + (y * z)
-- (x + y) * z = (x * z) + (y * z) -- IH

-- (s(x) + y) * z -> s(x + y) * z by(+)

-- (s(x) * z) + (y * z) -> ((x * z) + z) + (y * z)
-- (x * z) + z + (y * z) -> (x * z) + (y * z) + z by(+)
-- (x * z) + (y * z) + z -> (x + y) * z + z by(IH)
-- s(x + y) * z by(*)

open PNAT1 .
  -- fresh constants
  ops x y z : -> PNat .
  -- IH
  eq (x * Y) * Z = x * (Y * Z) . 
  -- lemma1
close

mod! PNAT2 {
  [PNat]
  op 0 : -> PNat {constr} .
  op s : PNat -> PNat {constr} .
  vars X Y Z : PNat .

  eq (0 = s(Y)) = false .
  eq (s(X) = s(Y)) = (X = Y) .

  -- 
  op _+_ : PNat PNat -> PNat {assoc comm} .
  eq 0 + Y = Y .
  eq s(X) + Y = s(X + Y) .

  op _*_ : PNat PNat -> PNat .
  eq 0 * Y = 0 .
  eq s(X) * Y = (X * Y) + Y .

  op fact1 : PNat -> PNat .
  eq fact1(0) = s(0) .
  eq fact1(s(X)) = s(X) * fact1(X) .

  op fact2 : PNat -> PNat .
  op sfact2 : PNat PNat -> PNat .
  eq fact2(X) = sfact2(X,s(0)) .
  eq sfact2(0,Y) = Y .
  eq sfact2(s(X),Y) = sfact2(X,s(X) * Y) .

}

-- lemma
-- base case
open PNAT2 .
  -- fresh constants
  ops y z : -> PNat .
  -- check
  red (0 + y) * z = (0 * z) + (y * z) .
close

-- induction case
open PNAT2 .
  -- fresh constants
  ops x y z : -> PNat .
  -- IH
  eq (x + Y) * Z = (x * Z) + (Y * Z) .
  -- check
  red (s(x) + y) * z = (s(x) * z) + (y * z) .
close

-- 分配法則
-- base case
open PNAT2 .
  -- fresh constants
  ops y z : -> PNat .
  -- check
  red (0 * y) * z = 0 * (y * z) .
close

-- induction case
open PNAT2 .
  -- fresh constants
  ops x y z : -> PNat .
  -- IH
  eq (x + Y) * Z = (x * Z) + (Y * Z) .
  -- check
  red (s(x) + y) * z = (s(x) * z) + (y * z) .
close

-- base case
open PNAT2 .
  -- fresh constants
  ops y z : -> PNat .
  -- check
  red (0 * y) * z = 0 * (y * z) .
close

-- induction case
open PNAT2 .
  -- fresh constants
  ops x y z : -> PNat .
  -- lemmas
  eq (X + Y) * Z = (X * Z) + (Y * Z) . -- (d*o+) -- IH
  eq (x * Y) * Z = x * (Y * Z) .
  -- check
  red (s(x) * y) * z = s(x) * (y * z) .
close

-- theorem4 comm *
-- X * Y = Y * X

-- lemma1
-- theorem y * 0 = 0
-- base case
open PNAT2 .
  -- check
  red 0 * 0 = 0 .
close

-- induction case
open PNAT2 .
  -- fresh constant
  ops x : -> PNat .
  -- IH 
  eq x * 0 = 0 .
  -- check
  red s(x) * 0 = 0 .
close

-- lemma2
-- theorem X * s(Y) = (X*Y) + X

-- base case
-- 0 * s(Y) = (0 * Y) + 0
open PNAT2 .
  -- fresh constant
  ops x y : -> PNat .
  -- check
  red 0 * s(y) = (0 * y) + 0 .
close

-- induction case
open PNAT2 .
  -- fresh constant
  ops x y : -> PNat .
  -- IH
  eq x + s(Y) = (x * Y) + x .
  -- check
  red s(x) * s(Y) = (s(x) * Y) + s(x) .
close


-- theorem comm *
-- base case
open PNAT2 .
  -- fresh constant
  ops x : -> PNat .
  -- IH
  eq x * 0 = 0 * x . -- (rz)
  -- check
  red 0 * s(x) = s(x) * 0 .
close

-- induction case
open PNAT2 .
  -- fresh constants
  ops x y : -> PNat .
  -- lemmas
  eq X * s(Y) = (X * Y) + X . -- (rs) 
  -- IH
  eq x * Y = Y * x .
  -- check
  red s(x) * y = y * s(x) .
close

mod! PNAT3 {
  [PNat]
  op 0 : -> PNat {constr} .
  op s : PNat -> PNat {constr} .
  vars X Y Z : PNat .

  eq (0 = s(Y)) = false .
  eq (s(X) = s(Y)) = (X = Y) .

  -- 
  op _+_ : PNat PNat -> PNat {assoc comm} .
  eq 0 + Y = Y .
  eq s(X) + Y = s(X + Y) .

  op _*_ : PNat PNat -> PNat {assoc comm} .
  eq 0 * Y = 0 .
  eq s(X) * Y = (X * Y) + Y .

  op fact1 : PNat -> PNat .
  eq fact1(0) = s(0) .
  eq fact1(s(X)) = s(X) * fact1(X) .

  op fact2 : PNat -> PNat .
  op sfact2 : PNat PNat -> PNat .
  eq fact2(X) = sfact2(X,s(0)) .
  eq sfact2(0,Y) = Y .
  eq sfact2(s(X),Y) = sfact2(X,s(X) * Y) .
  -- sfact2(s(5),s(0)) = sfact2(s(4),s(5)*s(0))
  -- sfact2(s(4),s(5)*s(0)) = sfact2(s(3),s(4)*s(5)*s(0))

  op sum1 : PNat -> PNat .
  eq sum1(0) = s(0) . -- s1-1
  eq sum1(s(X)) = s(X) + sum1(X) . -- s1-2

  op sum2 : PNat -> PNat .
  op ssum2 : PNat PNat -> PNat .
  eq sum2(X) = ssum2(X,s(0)) . -- s2
  eq ssum2(0,Y) = Y . -- ss2-1
  eq ssum2(s(X),Y) = ssum2(X,s(X) + Y) . -- ss2-2
}

-- fact
-- theorem fact1(X) = fact2(X)

-- base case
-- fact1(0) = fact2(0)
-- fact1(0) -> s(0) by(f1-1)
-- fact2(0) -> sfact2(0, s(0)) . by(f2)
-- sfact2(0,s(0)) -> s(0) . by(f2-1)
open PNAT3 .
  -- fresh constants
  ops x : -> PNat .
  -- check
  red fact1(0) = fact2(0) .
close

-- lemma1
-- base case
open PNAT3 .
  -- fresh constants
  ops y z : -> PNat . -- check
  red y * sfact2(0,z) = sfact2(0,y * z) . 
close

-- induction case
-- fact1(s(x)) = fact2(s(x))
-- fact1(x) = fact2(x) -- (IH)

-- fact1(s(x)) -> s(x) * fact1(x) -- by(f1-2)
-- s(x)*fact1(x) -> s(x)*fact2(x) -- by(IH)
-- s(x)*fact2(x) -> s(x) * sfact2(x,s(0)) -- by(f2)

-- fact2(s(x)) -> sfact2(s(x),s(0)) -- by(f2)
-- sfact2(s(x),s(0)) -> sfact2(x, s(x)*s(0)) -- by(sf2-2)

-- lemma1 Y * sfact2(X,Z) = sfact2(X, Y * Z)
-- base case
-- y * sfact2(0,z) -> y * z by(sf2-1)
-- sfact2(0, y * z) -> y * z by(sf2-1)

-- induction case
-- y * sfact2(s(x),z) = sfact2(s(x), y * z)
-- y * sfact2(x,z) = sfact2(x, y * z) -- IH

-- y*sfact2(s(x),z) -> y*sfact2(x,s(x)*z) -- by(sf2-2)
-- y*sfact2(x,s(x)*z) -> sfact2(x,y*(s(x)*z)) -- by(IH)

-- sfact2(s(x),y*z) -> sfact2(x,s(x)*(y*z)) -- by(sf2-2)
-- sfact2(x,s(x)*(y*z)) -> sfact2(x,(s(x)*y)*z) -- by(assoc)
-- sfact2(x,(s(x)*y)*z) -> sfact2(x,(y*s(x))*z) -- by(comm)
-- sfact2(x,(y*s(x))*z -> sfact2(x,y*(s(x)*z)) -- by(comm)

open PNAT3 .
  -- fresh constants
  ops x y z : -> PNat .
  -- lemmas eq(X+Y)*Z=(X*Z)+(Y*Z). --(d*o+) -- IH
  eq Y * sfact2(x,Z) = sfact2(x,Y * Z) .
  -- check
  red y * sfact2(s(x),z) = sfact2(s(x),y * z) .
close

-- induction case
-- fact1(s(x)) = fact2(s(x))

-- fact1(X) = fact2(X) IH

-- fact1(s(x)) -> s(x) * fact1(x)

-- fact2(s(x)) -> sfact2(s(x),s(0)) by(sfact1)
-- sfact2(s(x),s(0)) -> sfact2(x,s(x) * s(0)) by(sfact2)
-- sfact2(x,s(x) * s(0)) -> 
open PNAT3 .
  -- fresh constants
  op x : -> PNat .
  -- lemmas
  eq Y * sfact2(X,Z) = sfact2(X,Y * Z) . -- (sf2-p) -- IH
  eq fact1(x) = fact2(x) .
  -- check
  red fact1(s(x)) = fact2(s(x)) .
close


-- ####### theorem sum1(X) = sum2(X)
-- Proof of Theorem by Structual induction on X .
-- Let x be fresh constants of PNat .

-- Base case
-- sum1(0) = sum2(0)
-- sum1(0) -> s(0) by(s1)
-- sum2(0) -> ssum2(0,s(0)) by(s2)
-- ssum2(0,s(0)) -> s(0) by(ss2-1)

-- Induction case
-- sum1(s(x)) = sum2(s(x))
-- sum1(x) = sum2(x) IH
-- sum1(s(x)) -> s(x) + sum1(x) by(s1-2)
-- s(x) + sum1(x) -> s(x) + sum2(x) by(IH)
-- s(x) + sum2(x) -> s(x) + ssum2(x,s(0)) by(s2)

-- sum2(s(x)) -> ssum2(s(x),s(0)) by(s2)
-- ssum2(s(x),s(0)) -> ssum2(x,s(x)+s(0)) by(ss-2)

-- ######## lemma
-- y + ssum2(s(x),s(0)) = ssum2(x,s(x)+s(0))
-- x + ssum2(Y,Z) = ssum2(Y,x+Z) -- IH

-- Base case
-- x + ssum2(0,Z) = ssum2(0,x+Z)

-- x + ssum2(0,Z) -> x + Z by(ss2-1)
-- ssum2(0,x+Z) -> x + Z by(ss2-1)

-- Induction case
-- y + ssum2(s(x),Z) = ssum2(s(x),y+Z)

-- y + ssum2(s(x),Z) -> y + ssum2(x,s(x) + Z) by(ss2-2)
-- y + ssum2(x,s(x) + Z) -> ssum(x, y + (s(x) + Z)) by(IH)

-- ssum2(s(x),y+Z) -> ssum2(x, s(x) + (y+z)) by(ss2-2)
-- ssum2(x, s(x) + (y+z)) -> ssum2(x, (s(x) + y) + z) by(assoc)
-- ssum2(x, (s(x) + y) + z) -> ssum2(x, (y + s(x)) + z) by(comm)
-- ssum2(x, (y + s(x)) + z) -> ssum2(x, y+(s(x) + z)) by(assoc)

-- end of proof

open PNAT3 .
  op x : -> PNat .
  eq sum1(x) = sum2(x) .
  eq Y + ssum2(X,Z) = ssum2(X,Y + Z) . -- IH
  red sum1(s(x)) = sum2(s(x)) .
close
