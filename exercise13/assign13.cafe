mod! LIST1 (E :: TRIV) {
  [List]
  op nil : -> List {constr}
  op _|_ : Elt.E List -> List {constr} .
  vars E E2 : Elt.E .
  vars L1 L2 L3 : List .
  eq (nil = E | L1) = false .
  eq (E | L1 = E2 | L2) = (E = E2) and (L1 = L2) .
  -- append
  op _@_ : List List -> List .
  eq nil @ L2 = L2 . -- (@1)
  -- L1,L2を連結して先頭にEを置く
  eq (E | L1) @ L2 = E | (L1 @ L2) . -- (@2)
  -- 反転
  -- 先頭の要素を除いたものを反転する + 先頭の要素を末尾に持っていく
  op rev1 : List -> List .
  eq rev1(nil) = nil . -- (r1-1) 
  eq rev1(E | L1) = rev1(L1) @ (E | nil) . -- (r1-2)
  -- 反転 tail recursive
  -- 結果を引数に渡す
  op rev2 : List -> List .
  op sr2 : List List -> List .
  eq rev2(L1) = sr2(L1,nil) . -- (r2)
  eq sr2(nil,L2) = L2 . -- (sr2-1)
  eq sr2(E | L1,L2) = sr2(L1,E | L2) . -- (sr2-2)
}

-- Theorem1 assoc _@_
-- (L1 @ L2) @ L3 = L1 @ (L2 @ L3)
-- base case
open LIST1 .
  -- fresh constants
  ops l2 l3 : -> List .
  -- check
  red (nil @ l2) @ l3 = nil @ (l2 @ l3) .
close

-- induction case
open LIST1 .
  -- fresh constants
  ops l1 l2 l3 : -> List .
  op e : -> Elt.E .
  -- IH
  -- eq (l1 @ L2) @ L3 = l1 @ (L2 @ L3) .
  eq ((l1 @ L2) @ L3) = (l1 @ (L2 @ L3)) .
  -- check
  -- 機能法的にnがl1だと次の要素はe|l1
  red ((e | l1) @ l2) @ l3 = (e | l1) @ (l2 @ l3) .
  -- red l2 = l2 .
close

-- lemma1 base case
open LIST1 .
  -- fresh constants
  op l2 : -> List .
  op e2 : -> Elt.E .
  -- check
  red sr2(nil,e2 | l2) = sr2(nil,nil) @ (e2 | l2) .
close

-- lemma1 induction case
set trace on
open LIST1 .
  -- fresh constants
  ops l1 l2 : -> List .
  ops e e2 : -> Elt.E .
  -- induction hypothesis
  eq sr2(l1,E2 | L2) = sr2(l1,nil) @ (E2 | L2) .
  -- check
  red sr2(e | l1,e2 | l2) = sr2(e | l1,nil) @ (e2 | l2) .
close
set trace off

-- rev1(L1) = rev2(L1) base case
open LIST1 .
  -- check
  red rev1(nil) = rev2(nil) .
close

-- rev1(L1) = rev2(L1) induction case
open LIST1 .
  -- fresh constants
  op l1 : -> List .
  op e : -> Elt.E .
  -- induction hypothesis
  eq rev1(l1) = rev2(l1) .
  -- lemmas
  eq sr2(L1,E2 | L2) = sr2(L1,nil) @ (E2 | L2) . -- check
  red rev1(e | l1) = rev2(e | l1) .
close