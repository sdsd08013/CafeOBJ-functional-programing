-- :goal { eq [assoc+] : (X+Y) + Z = X + (Y+Z) . }

-- ind on X:S
-- どの変数に着目するか

-- :apply(tc)
-- theorem of constant

-- :apply(rd)
-- reduction

mod! PNAT1 {
  [PNat]
  op 0 : -> PNat {constr} .
  op s : PNat -> PNat {constr} .
  vars X Y Z : PNat .

  -- sが1回でもかかっている->1以上の自然数
  -- 0と1以上の自然数は常に異なる
  eq (0 = s(Y)) = false .

  eq (s(X) = s(Y)) = (X = Y) .

  -- 
  op _+_ : PNat PNat -> PNat .
  eq 0 + Y = Y .
  eq s(X) + Y = s(X + Y) .

  op _*_ : PNat PNat -> PNat .
  eq 0 * Y = 0 .
  eq s(X) * Y = (X * Y) + Y .

  op fact1 : PNat -> PNat .
  eq fact1(0) = s(0) . -- f1-1
  eq fact1(s(X)) = s(X) * fact1(X) . -- f1-2

  op fact2 : PNat -> PNat .
  op sfact2 : PNat PNat -> PNat .
  eq fact2(X) = sfact2(X,s(0)) . -- f2
  eq sfact2(0,Y) = Y . -- sf2-1
  eq sfact2(s(X),Y) = sfact2(X,s(X) * Y) . -- sf2-2
}


"Theorem 1. [_+_ is associative (assoc+)] (X + Y) + Z = X + (Y + Z)
Proof. By induction on X."
open PNAT1 .
  :goal { eq [assoc+] : (X + Y) + Z = X + (Y + Z) . } :ind on (X:PNat)
  :apply (si)
  -- I. Base case
  :apply (tc)
  :apply (rd)
  -- II. Induction case
  :apply (tc)
  :apply (rd)
close
"End of Proof of Theorem 1"

mod! PNAT3 {
  [PNat]
  op 0 : -> PNat {constr} .
  op s : PNat -> PNat {constr} .
  vars X Y Z : PNat .

  -- sが1回でもかかっている->1以上の自然数
  -- 0と1以上の自然数は常に異なる
  eq (0 = s(Y)) = false .

  eq (s(X) = s(Y)) = (X = Y) .

  -- 
  op _+_ : PNat PNat -> PNat {assoc comm} .
  eq 0 + Y = Y .
  eq s(X) + Y = s(X + Y) .

  op _*_ : PNat PNat -> PNat {assoc comm} .
  eq 0 * Y = 0 .
  eq s(X) * Y = (X * Y) + Y .

  op fact1 : PNat -> PNat .
  eq fact1(0) = s(0) . -- f1-1
  eq fact1(s(X)) = s(X) * fact1(X) . -- f1-2

  op fact2 : PNat -> PNat .
  op sfact2 : PNat PNat -> PNat .
  eq fact2(X) = sfact2(X,s(0)) . -- f2
  eq sfact2(0,Y) = Y . -- sf2-1
  eq sfact2(s(X),Y) = sfact2(X,s(X) * Y) . -- sf2-2
}

mod! PNAT3-D*O+ {
  pr(PNAT3)
  vars X Y Z : PNat .
  eq (X + Y) * Z = (X * Z) + (Y * Z) .
}

mod! LIST1 (E :: TRIV) {
  [List]
  op nil : -> List {constr}
  op _|_ : Elt.E List -> List {constr} .
  vars E E2 : Elt.E .
  vars L1 L2 L3 : List .
  eq (nil = E | L1) = false .
  eq (E | L1 = E2 | L2) = (E = E2) and (L1 = L2) .
  op _@_ : List List -> List .
  eq nil @ L2 = L2 . -- (@1)
  eq (E | L1) @ L2 = E | (L1 @ L2) . -- (@2)
  op rev1 : List -> List .
  eq rev1(nil) = nil . -- (r1-1) 
  eq rev1(E | L1) = rev1(L1) @ (E | nil) . -- (r1-2)
  op rev2 : List -> List .
  op sr2 : List List -> List .
  eq rev2(L1) = sr2(L1,nil) . -- (r2)
  eq sr2(nil,L2) = L2 . -- (sr2-1)
  eq sr2(E | L1,L2) = sr2(L1,E | L2) . -- (sr2-2)
}


mod! PNAT3-SF2-P {
  pr(PNAT3)
  vars X Y Z : PNat .
  eq [sf2-p] : Y * sfact2(X,Z) = sfact2(X,Y * Z) .
}


"Theorem 5 [Correctness of tail recursive fact (ctrf)] 
fact1(X) = fact2(X)
Proof. By induction on X."
open PNAT3-SF2-P .
  :goal { eq [ctrf] : fact1(X) = fact2(X) . } 
  :ind on (X:PNat)
  :apply (si)
  -- I. Base case
  :apply (rd)
  -- II. Induction case
  :apply (rd)
close
"End of Proof of Theorem 5"

-- exercises2
-- 手書き,補助,CITPについて意見(感想)を述べる