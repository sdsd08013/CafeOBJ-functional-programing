-- gcd
mod! GCD {
  pr(NAT)
  op gcd : Nat Zero -> Zero .
  op gcd : Nat NzNat -> NzNat .
  op gcd : Nat Nat -> Nat .
  var X : Nat .
  var NzY : NzNat .
  eq gcd(X,0) = X .
  eq gcd(X,NzY) = gcd(NzY,X rem NzY) .
}

-- lcm
mod! LCM {
  pr(GCD)
  op lcm : Nat Zero -> Zero .
  op lcm : Nat NzNat -> Nat .
  op lcm : Nat Nat -> Nat .
  var X : Nat .
  var NzY : NzNat .
  eq lcm(X,0) = 0 .
  eq lcm(X,NzY) = (X quo gcd(X,NzY)) * NzY .
}

mod! NAT-ERR {
  pr(NAT)
  [Nat ErrNat < Nat&Err]
  op errNat : -> ErrNat {constr} .
  op p_ : Zero -> ErrNat . -- minus
  op p_ : ErrNat -> ErrNat .
  op p_ : Nat&Err -> Nat&Err .
  op _quo_ : Nat&Err Zero -> ErrNat . -- divide zero
  op _quo_ : Nat&Err ErrNat -> ErrNat .
  op _quo_ : ErrNat Nat&Err -> ErrNat .
  op _quo_ : Nat&Err Nat&Err -> Nat&Err .
  var NE : Nat&Err .
  eq p 0 = errNat .
  eq p errNat = errNat .
  eq NE quo 0 = errNat .
  eq NE quo errNat = errNat .
  eq errNat quo NE = errNat .
}

mod! NATLIST {
  pr(NAT-ERR)
  [Nil NnNatList < NatList]
  var X : Nat .
  var Y : Nat .
  var Z : Nat .
  var L : NatList .
  var L2 : NatList .
  op nil : -> Nil {constr} .
  op _|_ : Nat NatList -> NnNatList {constr} .  -- push_top
  op hd : Nil -> ErrNat . -- head
  op hd : NnNatList -> Nat .
  op hd : NatList -> Nat&Err .
  op tl : NatList -> NatList . -- tail
  op _@_ : NatList NatList -> NatList . -- append
  op [_.._] : Nat Nat -> NatList . -- range
  op if_then {_} else {_} : Bool NatList NatList -> NatList .

  eq hd(nil) = errNat .
  eq hd(X | L) = X .
  eq tl(nil) = nil .
  eq tl(X | L) = L .
  eq [@1] : nil @ L2 = L2 .
  eq [@2] : (X | L) @ L2 = X | (L @ L2) .
  eq [X .. Y] = if X > Y then {nil} else {X | [X + 1 .. Y]} .
  eq [if1] : if true then {L} else {L2} = L .
  eq [if2] : if false then {L} else {L2} = L2 .
}

-- -- qsort
mod! QSORT {
  pr(NATLIST)
  op qsort : NatList -> NatList .
  op partition : Nat NatList NatList NatList -> NatList .
  vars X Y : Nat .
  vars L LL RL : NatList .
  eq [q1] : qsort(nil) = nil .
  eq [q2] : qsort(X | nil) = X | nil .
  eq [q3] : qsort(X | Y | L) = partition(X,Y | L,nil,nil) .
  eq [p1] : partition(X,nil,LL,RL) = qsort(LL) @ (X | qsort(RL)) .
  eq [p2] : partition(X,Y | L,LL,RL) = if Y < X then {partition(X,L,Y | LL,RL)} else {partition(X,L,LL,Y | RL)} .
}

-- -- sieve
mod! ERATOSTHENES {
  pr(NATLIST)
  op primesUpto : Nat -> NatList .
  op sieve : NatList -> NatList .
  op check : Nat NatList -> NatList .
  vars X Y : Nat .
  var NzX : NzNat .
  var L : NatList .
  eq primesUpto(X) = sieve([2 .. X]) .
  eq [s1] : sieve(nil) = nil .
  eq [s2] : sieve(X | L) = X | sieve(check(X,L)) .
  eq [c1] : check(0,L) = L .
  eq [c2] : check(NzX,nil) = nil .
  eq [c3] : check(NzX,Y | L) = if NzX divides Y then {check(NzX,L)} else {Y | check(NzX,L)} .
}

-- -- 2 fact
mod! FACT {
  pr(NAT)
  op fact : Nat -> Nat .
  var NzX : NzNat .
  eq fact(0) = 1 .
  eq fact(NzX) = NzX * fact(p NzX) .
}

-- 2 oedc-fact
mod! OEDC {
  pr(NAT)
  op cond : Bool Nat Nat -> Nat .
  op g : Nat Nat -> Nat .
  op oedc-fact : Nat -> Nat .
  vars X Y : Nat .
  var NzX : NzNat .
  eq [cond1] : cond(true,X,Y) = X .
  eq [cond2] : cond(false,X,Y) = Y .
  eq g(X,Y) = cond(X > Y, g(X,2 * Y) * g(sd(X,Y),2 * Y),X) .
  eq [of1] : oedc-fact(0) = 1 .
  eq [of2] : oedc-fact(NzX) = g(NzX,1) .
}

set trace on
open OEDC .
  red oedc-fact(5) .
close
